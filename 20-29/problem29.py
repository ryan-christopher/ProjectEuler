# Problem 29: Distinct Powers

# Consider all integer combinations for a^b for 2 <= a <= 5 and 2 <= b <= 5:
# 2^2 = 4   2^2 = 8    2^2 = 16   2^2 = 32  
# 3^2 = 9   3^2 = 27   3^2 = 81   3^2 = 243  
# 4^2 = 16  4^2 = 64   4^2 = 256  4^2 = 1024 
# 5^2 = 25  5^2 = 125  5^2 = 625  5^2 = 3125

# If they are then placed in numerical order, with any repeats removed, we get the following
# sequqnce of 15 distinct terms:
# 4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125

# How many distinct terms are in the sequence generated by a^b for 2 <= a <= 100 and 2 <= b <= 100?

def distinctPowers(a, b):
    powers = []
    for x in range(2, a + 1):
        for y in range(2, b + 1):
            power = x ** y
            if power not in powers:
                powers.append(power)
    return len(powers)

print(distinctPowers(100, 100))